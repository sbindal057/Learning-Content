import numpy as np


from matplotlib import pyplot as plt


from scipy import optimize

from scipy.io import loadmat

data = loadmat("C:/Users/Shweta Bindal/Downloads/ex3data1.mat")
X, y = data['X'], data['y'].ravel()
y[y == 10] = 0

# get number of examples in dataset
m = y.size

# randomly permute examples, to be used for visualizing one 
# picture at a time
indices = np.random.permutation(m)

# Randomly select 100 data points to display
rand_indices = np.random.choice(m, 100, replace=False)
sel = X[rand_indices, :]

input_layer_size  = 400  # 20x20 Input Images of Digits
hidden_layer_size = 25   # 25 hidden units
num_labels = 10          # 10 labels, from 0 to 9

# Load the .mat file, which returns a dictionary 
weights = loadmat("C:/Users/Shweta Bindal/Desktop/Shweta_Bindal190123057/ex3weights (1).mat")

# get the model weights from the dictionary
# Theta1 has size 25 x 401
# Theta2 has size 10 x 26
Theta1, Theta2 = weights['Theta1'], weights['Theta2']

# swap first and last columns of Theta2, due to legacy from MATLAB indexing, 
# since the weight file ex3weights.mat was saved based on MATLAB indexing
Theta2 = np.roll(Theta2, 1, axis=0)
z = np.concatenate([np.ones((m, 1)), X], axis=1)



import sys
import numpy as np
from matplotlib import pyplot

sys.path.append('..')


def displayData(X, example_width=None, figsize=(10, 10)):
    """
    Displays 2D data stored in X in a nice grid.
    """
    # Compute rows, cols
    if X.ndim == 2:
        m, n = X.shape
    elif X.ndim == 1:
        n = X.size
        m = 1
        X = X[None]  # Promote to a 2 dimensional array
    else:
        raise IndexError('Input X should be 1 or 2 dimensional.')

    example_width = example_width or int(np.round(np.sqrt(n)))
    example_height = n / example_width

    # Compute number of items to display
    display_rows = int(np.floor(np.sqrt(m)))
    display_cols = int(np.ceil(m / display_rows))

    fig, ax_array = pyplot.subplots(display_rows, display_cols, figsize=figsize)
    fig.subplots_adjust(wspace=0.025, hspace=0.025)

    ax_array = [ax_array] if m == 1 else ax_array.ravel()

    for i, ax in enumerate(ax_array):
        ax.imshow(X[i].reshape(example_width, example_width, order='F'),
                  cmap='Greys', extent=[0, 1, 0, 1])
        ax.axis('off')



displayData(sel)
def sigmoid(z):

    return 1/(1+np.exp(-z))
def predict(Theta1,Theta2,X):
    x=X.shape[0]
    if X.ndim==2:
        z = np.concatenate([np.ones((x,1)), X], axis=1)
    else:
        z = np.concatenate([np.ones(1),X], axis =0)
    layer1= np.dot (Theta1,np.transpose(z))
    layer1 = sigmoid(layer1)
    if X.ndim==2:
        m=layer1.shape[1]
    else:
        m=1
    if X.ndim==2:
        layers = np.concatenate([np.ones((m,1)), np.transpose(layer1)], axis=1)
    else:
        layers= np.concatenate([np.ones(1),layer1], axis =0)
    layer2=np.dot(layers,np.transpose(Theta2))
    layer2 = sigmoid(layer2)
    if X.ndim==2:
        p=np.argmax(layer2,axis=1)
    else:
         p=np.argmax(layer2,axis=0)
    
    return p
z = np.concatenate([np.ones((m,1)), X], axis=1) 

pred = predict(Theta1, Theta2, X)
print('Training Set Accuracy: {:.1f}%'.format(np.mean(pred == y) * 100))
if indices.size > 0:
    i, indices = indices[0], indices[1:]
    displayData(X[i, :], figsize=(4, 4))
    pred = predict(Theta1, Theta2, X[i, :])
    print('Neural Network Prediction: {}'.format(pred))
else:
    print('No more images to display!')

